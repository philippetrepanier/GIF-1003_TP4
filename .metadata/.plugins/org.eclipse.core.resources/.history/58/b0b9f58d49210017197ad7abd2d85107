/**
 * \file PersonneException.h
 * \brief
 * \author Philippe Trépanier
 * \date 2017-04-14
 */

#ifndef PERSONNEEXCEPTION_H_
#define PERSONNEEXCEPTION_H_
#include <string>
#include <stdexcept>
/**
 * \class PersonneException
 * \brief Classe de base des exceptions de Personne.
 */
class PersonneException: public std::logic_error
{
public:
	PersonneException(std::string, unsigned int, std::string, std::string);
	~PersonneException() throw ()
	{
	}
	;
	std::string reqTexteException() const;

private:
	std::string m_expression;
	std::string m_fichier;
	unsigned int m_ligne;
};
/**
 * \class PersonneDejaPresenteException
 * \brief Classe pour la gestion des erreurs d'une personne déja présente lors de l'ajout.
 */

class PersonneDejaPresenteException: public PersonneException
{
public:
	PersonneDejaPresenteException(std::string, unsigned int, std::string);
};
/**
 * \class PreconditionException
 * \brief Classe pour la gestion des erreurs de précondition.
 */

class PersonneAbsenteException: public PersonneException
{
public:
	PersonneAbsenteException(std::string, unsigned int, std::string);
};

// --- Définition des macros de contrôle de la théorie du contrat

#if !defined(NDEBUG)
// --- Mode debug

#  define INVARIANTS() \
      verifieInvariant()

#  define ASSERTION(f)     \
      if (!(f)) throw AssertionException(__FILE__,__LINE__, #f);
#  define PRECONDITION(f)  \
      if (!(f)) throw PreconditionException(__FILE__, __LINE__, #f);
#  define POSTCONDITION(f) \
      if (!(f)) throw PostconditionException(__FILE__, __LINE__, #f);
#  define INVARIANT(f)   \
      if (!(f)) throw InvariantException(__FILE__,__LINE__, #f);

// --- LE MODE RELEASE
#else

#  define PRECONDITION(f);
#  define POSTCONDITION(f);
#  define INVARIANTS();
#  define INVARIANT(f);
#  define ASSERTION(f);

#endif  // --- if !defined (NDEBUG)

#endif /* PERSONNEEXCEPTION_H_ */
